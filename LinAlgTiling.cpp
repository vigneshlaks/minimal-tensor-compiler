#include "mlir/Dialect/Linalg/IR/Linalg.h"
#include "mlir/Dialect/Linalg/Transforms/Transforms.h"
#include "mlir/Dialect/SCF/IR/SCF.h"
#include "mlir/Dialect/Tensor/IR/Tensor.h"
#include "mlir/Pass/Pass.h"
#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
#error "Processing LinAlgTiling.cpp"
#include "MinimalPasses.h"

using namespace mlir;

namespace {
// Inherit from the base class generated by TableGen
struct LinalgTilingPass
    : public impl::LinalgTilingBase<LinalgTilingPass> {

  LinalgTilingPass() = default;
  
  void runOnOperation() override {
    func::FuncOp funcOp = getOperation();
    MLIRContext *context = &getContext();
    
    // Configure tiling options
    linalg::LinalgTilingOptions tilingOptions;


    if (!tileSizes.empty())
      tilingOptions = tilingOptions.setTileSizes(tileSizes);
    else
      tilingOptions = tilingOptions.setTileSizes({8, 8, 8}); // Default sizes
    
    tilingOptions = tilingOptions.setLoopType(linalg::LinalgTilingLoopType::Loops);
    
    // Create tiling patterns
    RewritePatternSet patterns(context);
    linalg::populateLinalgTilingPatterns(context, tilingOptions, patterns);
    
    // Apply patterns
    if (failed(applyPatternsAndFoldGreedily(funcOp, std::move(patterns)))) {
      signalPassFailure();
    }
  }
};
} // namespace

// Implement the pass creation that was declared by TableGen
std::unique_ptr<Pass> mlir::minimal::createLinalgTilingPass() {
  return std::make_unique<LinalgTilingPass>();
}